(in-package "ACL2S")
(include-book "performance-results-2")

(propertyd time-to-fill-and-conditions-once-[nearly]-full-penultimate-step
	   (sm :simplified-model R b :pos)
	   :h (^ (< b R)
		 (< R (simplified-model-d-cap sm))
		 (endp (simplified-model-chan sm))
		 (natp (/ (- (simplified-model-d-cap sm) R) (- R b)))
		 (<= (+ (simplified-model-cur sm)
			(* R (steps-to-fill R b (simplified-model-d-cap sm))))
		     (+ (simplified-model-hia sm) (simplified-model-n sm)))
		 ;; Suppose that an ack was just sent and, immediately afterword, received.
		 ;; Therefore, cur = ack.
		 (= (simplified-model-cur sm) (simplified-model-ack sm)))
	   (let* ((warmup-period (steps-to-fill R b (simplified-model-d-cap sm)))
		  (many-steps-later (many-steps-simplified sm R b warmup-period)))
	     (^ (== (simplified-model-chan many-steps-later)
		    (top-dn (+ (simplified-model-cur sm) (* R warmup-period) -1)
			    (* (- R b) warmup-period)))
		(= (simplified-model-ack many-steps-later)
		   (+ (* b warmup-period)
		      (simplified-model-ack sm)))
		(= (simplified-model-cur many-steps-later)
		   (+ (* R warmup-period) (simplified-model-cur sm)))))
	   :hints
	   (("Goal" :use (:instance time-to-fill-and-conditions-once-[nearly]-full
				    (steps (steps-to-fill R b (simplified-model-d-cap sm)))))))

(propertyd dlv-b-preserves-all-inf-all-1 (sys :system b :nat)
     :h (^ (<= (tbf-bkt (system-s2r sys))
         (len (tbf-data (system-s2r sys))))
     (all-1 (tbf-data (system-s2r sys)))
     (all-inf (tbf-data (system-s2r sys)))
     (= b (tbf-bkt (system-s2r sys))))
     (^ (all-1 (tbf-data (system-s2r (dlv-b sys b))))
        (all-inf (tbf-data (system-s2r (dlv-b sys b)))))
     :instructions ((:induct (dlv-b-inductor sys b))
        :pro (:use (:instance dlv-b-contracts))
        (:use (:instance dlv-1-preserves-all-inf-all-1))
        (:use (:instance dlv-b-definition-rule))
        :prove
        (:use (:instance dlv-b-definition-rule))
        :prove))

(propertyd single-step-preserves-all-inf-all-1 (sys :system R b :pos)
     :h (^ (<= (+ (sender-state-cur (system-sender sys)) R)
         (+ (sender-state-hia (system-sender sys))
      (sender-state-n (system-sender sys))))
     (all-inf (tbf-data (system-s2r sys)))
     (all-1 (tbf-data (system-s2r sys)))
     (not (natp (tbf-del (system-s2r sys))))
     (<= b (min R (tbf-d-cap (system-s2r sys))))
     (= b (tbf-b-cap (system-s2r sys)))
     (= b (tbf-rat (system-s2r sys)))
     (<= (tbf-bkt (system-s2r sys))
         (tbf-b-cap (system-s2r sys)))
     (<= (tbf-b-cap (system-s2r sys))
         (tbf-d-cap (system-s2r sys)))
     (<= (len (tbf-data (system-s2r sys)))
         (tbf-d-cap (system-s2r sys))))
     (^ (all-inf (tbf-data (system-s2r (single-step sys R b))))
        (all-1 (tbf-data (system-s2r (single-step sys R b)))))
     :hints (("Goal" :use ((:instance single-step-definition-rule)
         (:instance single-step-input-contracts)
         (:instance dlv-b-preserves-all-inf-all-1
              (sys (system-s2r-tick-step (snd-r sys r))))))))

(propertyd dlv-b-doesnt-change-sender (sys :system b :nat)
     :h (^ (<= (tbf-bkt (system-s2r sys))
         (len (tbf-data (system-s2r sys))))
     (all-1 (tbf-data (system-s2r sys)))
     (all-inf (tbf-data (system-s2r sys)))
     (= b (tbf-bkt (system-s2r sys))))
     (== (system-sender (dlv-b sys b))
         (system-sender sys))
     :instructions ((:induct (dlv-b-inductor sys b))
        (:use (:instance dlv-b-contracts))
        (:use (:instance dlv-1-preserves-all-inf-all-1))
        :pro
        (:claim (equal (system-sender (dlv-b (dlv-1 sys) (+ -1 b)))
           (system-sender (dlv-1 sys))))
        (:use (:instance dlv-b-definition-rule))
        :pro
        (:claim (equal (dlv-b sys b)
           (dlv-b (dlv-1 sys) (+ -1 b))))
        (:drop 1)
        (:use (:instance dlv-1-definition-rule))
        :pro
        (:claim (== (system-sender (dlv-1 sys))
              (system-sender sys)))
        (:use (:instance dlv-b-definition-rule (sys (dlv-1 sys))
             (b (1- b))))
        :prove
        (:use (:instance dlv-b-definition-rule))
        :prove))

(propertyd dlv-1-consts (sys :system)
     :h (^ (all-1 (tbf-data (system-s2r sys)))
     (posp (tbf-bkt (system-s2r sys)))
     (consp (tbf-data (system-s2r sys))))
     (^ (= (tbf-d-cap (system-s2r (dlv-1 sys)))
     (tbf-d-cap (system-s2r sys)))
        (= (tbf-b-cap (system-s2r (dlv-1 sys)))
     (tbf-b-cap (system-s2r sys)))
        (= (tbf-rat (system-s2r (dlv-1 sys)))
     (tbf-rat (system-s2r sys)))
        (== (tbf-del (system-s2r (dlv-1 sys)))
      (tbf-del (system-s2r sys))))
     :hints (("Goal" :use ((:instance dlv-1-contracts-helper)
         (:instance dlv-1-definition-rule))
        :in-theory (enable tbf-fwd-definition-rule))))

(propertyd dlv-b-doesnt-change-consts-and-decrs-bkt (sys :system b :nat)
     :h (^ (<= (tbf-bkt (system-s2r sys))
         (len (tbf-data (system-s2r sys))))
     (all-1 (tbf-data (system-s2r sys)))
     (all-inf (tbf-data (system-s2r sys)))
     (= b (tbf-bkt (system-s2r sys))))
     (^ (= (tbf-d-cap (system-s2r (dlv-b sys b)))
     (tbf-d-cap (system-s2r sys)))
        (= (tbf-b-cap (system-s2r (dlv-b sys b)))
     (tbf-b-cap (system-s2r sys)))
        (= (tbf-rat (system-s2r (dlv-b sys b)))
     (tbf-rat (system-s2r sys)))
        (== (tbf-del (system-s2r (dlv-b sys b)))
      (tbf-del (system-s2r sys)))
        (= (tbf-bkt (system-s2r (dlv-b sys b)))
     (- (tbf-bkt (system-s2r sys)) b)))
     :instructions
     ((:induct (dlv-b-inductor sys b))
      :pro (:use (:instance dlv-b-contracts))
      :pro
      (:use (:instance dlv-1-preserves-all-inf-all-1))
      :pro
      (:claim (and (= (tbf-d-cap (system-s2r (dlv-b (dlv-1 sys) (+ -1 b))))
          (tbf-d-cap (system-s2r (dlv-1 sys))))
       (= (tbf-b-cap (system-s2r (dlv-b (dlv-1 sys) (+ -1 b))))
          (tbf-b-cap (system-s2r (dlv-1 sys))))
       (= (tbf-rat (system-s2r (dlv-b (dlv-1 sys) (+ -1 b))))
          (tbf-rat (system-s2r (dlv-1 sys))))
       (equal (tbf-del (system-s2r (dlv-b (dlv-1 sys) (+ -1 b))))
        (tbf-del (system-s2r (dlv-1 sys))))
       (= (tbf-bkt (system-s2r (dlv-b (dlv-1 sys) (+ -1 b))))
          (+ (tbf-bkt (system-s2r (dlv-1 sys)))
             (- (+ -1 b))))))
      (:drop 1 2 9)
      (:use (:instance dlv-b-definition-rule))
      :pro
      (:claim (equal (dlv-b sys b)
         (dlv-b (dlv-1 sys) (+ -1 b))))
      (:use (:instance dlv-1-definition-rule))
      :pro
      (:claim (== (system-s2r (dlv-1 sys))
      (tbf-fwd (system-s2r sys)
         (+ -1 (len (tbf-data (system-s2r sys)))))))
      (:drop 1 2)
      (:drop 1 2)
      (:use (:instance tbf-fwd-definition-rule
           (tbf (system-s2r sys))
           (i (+ -1 (len (tbf-data (system-s2r sys)))))))
      :pro
      (:use (:instance all-1-works-lst
           (tdgs (tbf-data (system-s2r sys)))))
      :pro
      (:claim
       (==
        (system-s2r (dlv-1 sys))
        (mset
         :data
         (remove-ith (tbf-data (system-s2r sys))
         (+ -1 (len (tbf-data (system-s2r sys)))))
         (mset
    :bkt
    (+ (tbf-bkt (system-s2r sys))
       (- (length (tdg-pld (nth (+ -1 (len (tbf-data (system-s2r sys))))
              (tbf-data (system-s2r sys)))))))
    (system-s2r sys)))))
      (:drop 2)
      (:use
       (:instance
        bkt-extractor (tbf (system-s2r sys))
        (d (remove-ith (tbf-data (system-s2r sys))
           (+ -1 (len (tbf-data (system-s2r sys))))))
        (bkt (+ (tbf-bkt (system-s2r sys))
          (- (length (tdg-pld (nth (+ -1 (len (tbf-data (system-s2r sys))))
                 (tbf-data (system-s2r sys))))))))))
      :pro
      (:claim (= (length (tdg-pld (nth (+ -1 (len (tbf-data (system-s2r sys))))
               (tbf-data (system-s2r sys)))))
           1))
      (:drop 2)
      (:claim (posp (tbf-bkt (system-s2r sys))))
      (:claim
       (natp (+ (tbf-bkt (system-s2r sys))
          (- (length (tdg-pld (nth (+ -1 (len (tbf-data (system-s2r sys))))
                 (tbf-data (system-s2r sys)))))))))
      (:claim (tdgsp (remove-ith (tbf-data (system-s2r sys))
               (+ -1 (len (tbf-data (system-s2r sys)))))))
      (:claim (tbfp (system-s2r sys)))
      (:claim
       (=
        (tbf-bkt
         (mset
    :data
    (remove-ith (tbf-data (system-s2r sys))
          (+ -1 (len (tbf-data (system-s2r sys)))))
    (mset
     :bkt
     (+ (tbf-bkt (system-s2r sys))
        (- (length (tdg-pld (nth (+ -1 (len (tbf-data (system-s2r sys))))
               (tbf-data (system-s2r sys)))))))
     (system-s2r sys))))
        (+ (tbf-bkt (system-s2r sys)) (- 1))))
      (:drop 1)
      (:claim (= (tbf-bkt (system-s2r (dlv-1 sys)))
           (+ (tbf-bkt (system-s2r sys)) -1)))
      (:claim (= (tbf-bkt (system-s2r (dlv-b sys b)))
           (+ (tbf-bkt (system-s2r sys)) (- b))))
      (:use (:instance tbf-fwd-definition-rule
           (tbf (system-s2r sys))
           (i (1- (len (tbf-data (system-s2r sys)))))))
      (:use (:instance dlv-1-contracts-helper))
      :pro (:use (:instance dlv-1-consts))
      :prove
      (:in-theory (enable dlv-b-definition-rule))
      :prove))

(propertyd system-s2r-tick-step-doesnt-change-sender (sys :system)
     (== (system-sender (system-s2r-tick-step sys))
         (system-sender sys))
     :hints (("Goal" :in-theory (enable system-s2r-tick-step-definition-rule))))

(propertyd single-step-slides-by-R (sys :system R b steps :pos)
     :h (^ (<= (+ (sender-state-cur (system-sender sys)) (* steps R))
         (+ (sender-state-hia (system-sender sys))
      (sender-state-n (system-sender sys))))
     (all-inf (tbf-data (system-s2r sys)))
     (all-1 (tbf-data (system-s2r sys)))
     (not (natp (tbf-del (system-s2r sys))))
     (<= b (min R (tbf-d-cap (system-s2r sys))))
     (= b (tbf-b-cap (system-s2r sys)))
     (= b (tbf-rat (system-s2r sys)))
     (<= (tbf-bkt (system-s2r sys))
         (tbf-b-cap (system-s2r sys)))
     (<= (tbf-b-cap (system-s2r sys))
         (tbf-d-cap (system-s2r sys)))
     (<= (len (tbf-data (system-s2r sys)))
         (tbf-d-cap (system-s2r sys))))
     (^
      (= (sender-state-cur (system-sender (single-step sys R b)))
         (+ R (sender-state-cur (system-sender sys))))
      (= (sender-state-hiA (system-sender (single-step sys R b)))
         (sender-state-hiA (system-sender sys)))
      (= (sender-state-N (system-sender (single-step sys R b)))
         (sender-state-N (system-sender sys)))
      (<= (+ (sender-state-cur (system-sender (single-step sys R b))) (* R (1- steps)))
    (+ (sender-state-hiA (system-sender (single-step sys R b)))
       (sender-state-N (system-sender (single-step sys R b))))))
     :instructions
     ((:use (:instance single-step-definition-rule))
      (:use (:instance dlv-b-doesnt-change-sender
           (sys (system-s2r-tick-step (snd-r sys r)))))
      (:use (:instance system-s2r-tick-step-after-snd-r-effect))
      (:use (:instance single-step-input-contracts))
      :pro
      (:claim (equal (single-step sys r b)
         (dlv-b (system-s2r-tick-step (snd-r sys r))
          b)))
      (:drop 4)
      (:claim (equal (system-sender (dlv-b (system-s2r-tick-step (snd-r sys r))
             b))
         (system-sender (system-s2r-tick-step (snd-r sys r)))))
      (:drop 3)
      (:claim
       (and
        (= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
     (tbf-b-cap (system-s2r sys)))
        (= (tbf-b-cap (system-s2r (system-s2r-tick-step (snd-r sys r))))
     (tbf-b-cap (system-s2r sys)))
        (= (tbf-d-cap (system-s2r (system-s2r-tick-step (snd-r sys r))))
     (tbf-d-cap (system-s2r sys)))
        (= (tbf-rat (system-s2r (system-s2r-tick-step (snd-r sys r))))
     (tbf-rat (system-s2r sys)))
        (equal (tbf-del (system-s2r (system-s2r-tick-step (snd-r sys r))))
         (tbf-del (system-s2r sys)))
        (= (sender-state-n (system-sender (system-s2r-tick-step (snd-r sys r))))
     (sender-state-n (system-sender sys)))
        (=
         (sender-state-cur (system-sender (system-s2r-tick-step (snd-r sys r))))
         (+ r
      (sender-state-cur (system-sender sys))))
        (equal (system-receiver (system-s2r-tick-step (snd-r sys r)))
         (system-receiver sys))))
      (:drop 2)
      (:claim
       (and
        (systemp (snd-r sys r))
        (= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
     (tbf-b-cap (system-s2r sys)))
        (= (tbf-b-cap (system-s2r sys)) b)
        (all-inf (tbf-data (system-s2r (snd-r sys r))))
        (all-1 (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
        (all-inf (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
        (equal (tdgs->poss
          (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
         (tdgs->poss (tbf-data (system-s2r (snd-r sys r)))))
        (<= (len (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
      (tbf-d-cap (system-s2r sys)))
        (= (tbf-d-cap (system-s2r (system-s2r-tick-step (snd-r sys r))))
     (tbf-d-cap (system-s2r sys)))
        (= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
     b)
        (<= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
      (len (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r))))))))
      (:drop 1)
      (:claim (= (sender-state-cur (system-sender (single-step sys r b)))
           (+ r
        (sender-state-cur (system-sender sys)))))
      (:use (:instance system-s2r-tick-step-definition-rule
           (sys (snd-r sys r))))
      :pro
      (:claim (== (system-sender (system-s2r-tick-step (snd-r sys r)))
      (system-sender (snd-r sys r))))
      (:claim (equal (system-s2r-tick-step (snd-r sys r))
         (mset :s2r
         (tbf-tick (system-s2r (snd-r sys r)))
         (snd-r sys r))))
      (:drop 1)
      (:use (:instance snd-r-effect-helper))
      :pro
      (:claim (and (= (tbf-bkt (system-s2r (snd-r sys r)))
          (tbf-bkt (system-s2r sys)))
       (= (tbf-b-cap (system-s2r (snd-r sys r)))
          (tbf-b-cap (system-s2r sys)))
       (= (tbf-d-cap (system-s2r (snd-r sys r)))
          (tbf-d-cap (system-s2r sys)))
       (= (tbf-rat (system-s2r (snd-r sys r)))
          (tbf-rat (system-s2r sys)))
       (equal (tbf-del (system-s2r (snd-r sys r)))
        (tbf-del (system-s2r sys)))
       (= (sender-state-n (system-sender (snd-r sys r)))
          (sender-state-n (system-sender sys)))
       (= (sender-state-hia (system-sender (snd-r sys r)))
          (sender-state-hia (system-sender sys)))
       (= (sender-state-cur (system-sender (snd-r sys r)))
          (+ (sender-state-cur (system-sender sys))
             r))
       (equal (system-receiver (snd-r sys r))
        (system-receiver sys))))
      (:drop 1)
      (:claim (== (system-sender (dlv-b (system-s2r-tick-step (snd-r sys r))
                b))
      (system-sender (snd-r sys r))))
      (:claim (= (sender-state-cur (system-sender (single-step sys r b)))
           (sender-state-cur (system-sender (snd-r sys r)))))
      (:claim (= (sender-state-hia (system-sender (single-step sys r b)))
           (sender-state-hia (system-sender (snd-r sys r)))))
      (:claim (= (sender-state-n (system-sender (single-step sys r b)))
           (sender-state-n (system-sender (snd-r sys r)))))
      (:claim (= (sender-state-hia (system-sender (single-step sys r b)))
           (sender-state-hia (system-sender sys))))
      (:claim (= (sender-state-n (system-sender (single-step sys r b)))
           (sender-state-n (system-sender sys))))
      (:claim (= (+ (sender-state-cur (system-sender (single-step sys r b)))
        (* r (+ -1 steps)))
           (+ (+ r
           (sender-state-cur (system-sender sys)))
        (* r (+ -1 steps)))))
      :prove))

(defthm len-preserved-by-simplification
  (=> (^ (systemp sys)
   (posp r)
   (posp b)
   (<= (+ (sender-state-cur (system-sender sys))
    r)
       (+ (sender-state-hia (system-sender sys))
    (sender-state-n (system-sender sys))))
   (all-inf (tbf-data (system-s2r sys)))
   (all-1 (tbf-data (system-s2r sys)))
   (not (natp (tbf-del (system-s2r sys))))
   (<= (tbf-b-cap (system-s2r sys))
       (min r (tbf-d-cap (system-s2r sys))))
   (= (tbf-b-cap (system-s2r sys))
      (tbf-rat (system-s2r sys)))
   (<= (tbf-bkt (system-s2r sys))
       (tbf-b-cap (system-s2r sys)))
   (<= (tbf-b-cap (system-s2r sys))
       (tbf-d-cap (system-s2r sys)))
   (<= (len (tbf-data (system-s2r sys)))
       (tbf-d-cap (system-s2r sys)))
   (<= b (min r (tbf-d-cap (system-s2r sys))))
   (= b (tbf-b-cap (system-s2r sys)))
   (= b (tbf-rat (system-s2r sys)))
   (v (endp (system-receiver sys))
      (== (system-receiver sys)
    (top-dn (maxl (system-receiver sys))
      (maxl (system-receiver sys))))))
      (= (len (tbf-data (system-s2r (single-step sys r b))))
   (- (min (tbf-d-cap (system-s2r sys))
     (+ (len (tbf-data (system-s2r sys))) r))
      b)))
  :instructions
  ((:use (:instance single-step-moves-thru-simplification))
   :pro
   (:claim (equal (simplify (single-step sys r (tbf-b-cap (system-s2r sys))))
      (single-step-simplified (simplify sys)
            r (tbf-b-cap (system-s2r sys)))))
   (:drop 1)
   (:use (:instance tdgs->poss-preserves-len
        (tdgs (tbf-data (system-s2r (single-step sys r b))))))
   :pro
   (:claim (= (len (tdgs->poss (tbf-data (system-s2r (single-step sys r b)))))
        (len (tbf-data (system-s2r (single-step sys r b))))))
   (:drop 1)
   (:use (:instance tdgs->poss-preserves-len
        (tdgs (tbf-data (system-s2r sys)))))
   :pro
   (:claim (= (len (tdgs->poss (tbf-data (system-s2r sys))))
        (len (tbf-data (system-s2r sys)))))
   (:drop 1)
   (:use (:instance simplify-definition-rule))
   (:use (:instance single-step-simplified-len
        (sm (simplify sys))))
   :pro
   (:claim
    (= (len (simplified-model-chan (single-step-simplified (simplify sys)
                 r b)))
       (+ (min (simplified-model-d-cap (simplify sys))
         (+ r
      (len (simplified-model-chan (simplify sys)))))
    (- b))))
   (:drop 1)
   (:use (:instance simplify-definition-rule
        (sys (single-step sys r b))))
   :pro
   (:claim
    (== (simplified-model-chan
   (simplify (single-step sys r (tbf-b-cap (system-s2r sys)))))
  (simplified-model-chan
   (single-step-simplified (simplify sys)
         r (tbf-b-cap (system-s2r sys))))))
   (:claim
    (=
     (len (simplified-model-chan (single-step-simplified (simplify sys)
               r b)))
     (len (simplified-model-chan
     (simplify (single-step sys r (tbf-b-cap (system-s2r sys))))))))
   (:claim (= (+ (min (simplified-model-d-cap (simplify sys))
          (+ r
       (len (simplified-model-chan (simplify sys)))))
     (- b))
        (+ (min (tbf-d-cap (system-s2r sys))
          (+ r
       (len (tdgs->poss (tbf-data (system-s2r sys))))))
     (- b))))
   (:claim
    (= (len (simplified-model-chan (single-step-simplified (simplify sys)
                 r b)))
       (+ (min (tbf-d-cap (system-s2r sys))
         (+ r (len (tbf-data (system-s2r sys)))))
    (- b))))
   (:drop 18 19 22 23 25)
   :prove))

