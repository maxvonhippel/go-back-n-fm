(in-package "ACL2S")
(include-book "performance-results-3")

(propertyd maxl-pos-so-works-in-top-dn-prop (sys :system)
	   (if (endp (system-receiver sys)) t
	     (^ (posp (maxl (system-receiver sys)))
		(possp (top-dn (maxl (system-receiver sys))
			       (maxl (system-receiver sys))))))
	   :hints (("Goal" :use (:instance maxl-nonempty-pos (ps (system-receiver sys))))))

(definecd receiver-is-valid (sys :system) :bool
  (if (endp (system-receiver sys)) t
    (== (system-receiver sys)
	(top-dn (maxl (system-receiver sys))
		(maxl (system-receiver sys)))))
  :body-contracts-hints (("Goal" :use (:instance maxl-pos-so-works-in-top-dn-prop))))

(propertyd cur-simplification (cur0 cur1 R steps :pos)
	   :h (= cur1 (+ r cur0))
	   (= (+ cur1 (* r (+ -1 steps)))
	      (+ cur0 (* r steps))))

(propertyd many-steps-contracts (sys :system R b steps :pos)
	   :h (^ (<= (+ (sender-state-cur (system-sender sys))
			(* r steps))
		     (+ (sender-state-hia (system-sender sys))
			(sender-state-n (system-sender sys))))
		 (all-inf (tbf-data (system-s2r sys)))
		 (all-1 (tbf-data (system-s2r sys)))
		 (! (natp (tbf-del (system-s2r sys))))
		 (<= b (min r (tbf-d-cap (system-s2r sys))))
		 (= b (tbf-b-cap (system-s2r sys)))
		 (= b (tbf-rat (system-s2r sys)))
		 (<= (tbf-bkt (system-s2r sys))
		     (tbf-b-cap (system-s2r sys)))
		 (<= (tbf-b-cap (system-s2r sys))
		     (tbf-d-cap (system-s2r sys)))
		 (<= (len (tbf-data (system-s2r sys)))
		     (tbf-d-cap (system-s2r sys)))
		 (!= steps 1)
		 (receiver-is-valid sys))
	   (^ (<= (+ (sender-state-cur (system-sender (single-step sys r b)))
		     (* r (1- steps)))
		  (+ (sender-state-hia (system-sender (single-step sys r b)))
		     (sender-state-n (system-sender (single-step sys r b)))))
	      (all-inf (tbf-data (system-s2r (single-step sys r b))))
	      (all-1 (tbf-data (system-s2r (single-step sys r b))))
	      (not (natp (tbf-del (system-s2r (single-step sys r b)))))
	      (<= b
		  (min r
		       (tbf-d-cap (system-s2r (single-step sys r b)))))
	      (= (tbf-b-cap (system-s2r (single-step sys r b))) b)
	      (= (tbf-rat (system-s2r (single-step sys r b))) b)
	      (<= (tbf-bkt (system-s2r (single-step sys r b)))
		  (tbf-b-cap (system-s2r (single-step sys r b))))
	      (<= (tbf-b-cap (system-s2r (single-step sys r b)))
		  (tbf-d-cap (system-s2r (single-step sys r b))))
	      (<= (len (tbf-data (system-s2r (single-step sys r b))))
		  (tbf-d-cap (system-s2r (single-step sys r b)))))
	   :instructions
	   ((:use (:instance receiver-is-valid-definition-rule))
	    :pro
	    (:claim (or (endp (system-receiver sys))
			(== (system-receiver sys)
			    (top-dn (maxl (system-receiver sys))
				    (maxl (system-receiver sys))))))
	    (:drop 1)
	    (:use (:instance len-preserved-by-simplification))
	    :pro
	    (:claim (= (len (tbf-data (system-s2r (single-step sys r b))))
		       (+ (min (tbf-d-cap (system-s2r sys))
			       (+ (len (tbf-data (system-s2r sys))) r))
			  (- b))))
	    (:drop 1)
	    (:use (:instance single-step-slides-by-r))
	    :pro
	    (:claim
	     (and (= (sender-state-cur (system-sender (single-step sys r b)))
		     (+ r
			(sender-state-cur (system-sender sys))))
		  (= (sender-state-hia (system-sender (single-step sys r b)))
		     (sender-state-hia (system-sender sys)))
		  (= (sender-state-n (system-sender (single-step sys r b)))
		     (sender-state-n (system-sender sys)))
		  (<= (+ (sender-state-cur (system-sender (single-step sys r b)))
			 (* r (+ -1 steps)))
		      (+ (sender-state-hia (system-sender (single-step sys r b)))
			 (sender-state-n (system-sender (single-step sys r b)))))))
	    (:drop 1)
	    (:use (:instance single-step-definition-rule))
	    :pro
	    (:claim (equal (single-step sys r b)
			   (dlv-b (system-s2r-tick-step (snd-r sys r))
				  b)))
	    (:drop 1)
	    (:use (:instance system-s2r-tick-step-after-snd-r-effect))
	    :pro
	    (:claim
	     (and
	      (= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
		 (tbf-b-cap (system-s2r sys)))
	      (= (tbf-b-cap (system-s2r (system-s2r-tick-step (snd-r sys r))))
		 (tbf-b-cap (system-s2r sys)))
	      (= (tbf-d-cap (system-s2r (system-s2r-tick-step (snd-r sys r))))
		 (tbf-d-cap (system-s2r sys)))
	      (= (tbf-rat (system-s2r (system-s2r-tick-step (snd-r sys r))))
		 (tbf-rat (system-s2r sys)))
	      (equal (tbf-del (system-s2r (system-s2r-tick-step (snd-r sys r))))
		     (tbf-del (system-s2r sys)))
	      (= (sender-state-n (system-sender (system-s2r-tick-step (snd-r sys r))))
		 (sender-state-n (system-sender sys)))
	      (=
	       (sender-state-cur (system-sender (system-s2r-tick-step (snd-r sys r))))
	       (+ r
		  (sender-state-cur (system-sender sys))))
	      (equal (system-receiver (system-s2r-tick-step (snd-r sys r)))
		     (system-receiver sys))))
	    (:drop 1)
	    (:use (:instance dlv-b-doesnt-change-consts-and-decrs-bkt
			     (sys (system-s2r-tick-step (snd-r sys r)))))
	    (:use (:instance single-step-input-contracts))
	    :pro
	    (:claim
	     (and
	      (systemp (snd-r sys r))
	      (= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
		 (tbf-b-cap (system-s2r sys)))
	      (= (tbf-b-cap (system-s2r sys)) b)
	      (all-inf (tbf-data (system-s2r (snd-r sys r))))
	      (all-1 (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (all-inf (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (equal (tdgs->poss
		      (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
		     (tdgs->poss (tbf-data (system-s2r (snd-r sys r)))))
	      (<= (len (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
		  (tbf-d-cap (system-s2r sys)))
	      (= (tbf-d-cap (system-s2r (system-s2r-tick-step (snd-r sys r))))
		 (tbf-d-cap (system-s2r sys)))
	      (= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
		 b)
	      (<= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
		  (len (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r))))))))
	    (:claim
	     (and
	      (= (tbf-d-cap (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
					       b)))
		 (tbf-d-cap (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (= (tbf-b-cap (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
					       b)))
		 (tbf-b-cap (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (= (tbf-rat (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
					     b)))
		 (tbf-rat (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (equal (tbf-del (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
						 b)))
		     (tbf-del (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (= (tbf-bkt (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
					     b)))
		 (+ (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
		    (- b)))))
	    (:drop 1 2)
	    (:use (:instance dlv-b-doesnt-change-sender
			     (sys (system-s2r-tick-step (snd-r sys r)))))
	    :pro
	    (:claim (equal (system-sender (dlv-b (system-s2r-tick-step (snd-r sys r))
						 b))
			   (system-sender (system-s2r-tick-step (snd-r sys r)))))
	    (:drop 1)
	    (:claim (= (sender-state-cur (system-sender (single-step sys r b)))
		       (+ r
			  (sender-state-cur (system-sender sys)))))
	    (:use (:instance snd-r-effect-helper))
	    :pro
	    (:claim (and (= (tbf-bkt (system-s2r (snd-r sys r)))
			    (tbf-bkt (system-s2r sys)))
			 (= (tbf-b-cap (system-s2r (snd-r sys r)))
			    (tbf-b-cap (system-s2r sys)))
			 (= (tbf-d-cap (system-s2r (snd-r sys r)))
			    (tbf-d-cap (system-s2r sys)))
			 (= (tbf-rat (system-s2r (snd-r sys r)))
			    (tbf-rat (system-s2r sys)))
			 (equal (tbf-del (system-s2r (snd-r sys r)))
				(tbf-del (system-s2r sys)))
			 (= (sender-state-n (system-sender (snd-r sys r)))
			    (sender-state-n (system-sender sys)))
			 (= (sender-state-hia (system-sender (snd-r sys r)))
			    (sender-state-hia (system-sender sys)))
			 (= (sender-state-cur (system-sender (snd-r sys r)))
			    (+ (sender-state-cur (system-sender sys))
			       r))
			 (equal (system-receiver (snd-r sys r))
				(system-receiver sys))))
	    (:drop 1)
	    (:claim (= (sender-state-hia (system-sender (single-step sys r b)))
		       (sender-state-hia (system-sender sys))))
	    (:claim (= (sender-state-n (system-sender (single-step sys r b)))
		       (sender-state-n (system-sender sys))))
	    (:use (:instance cur-simplification
			     (cur0 (sender-state-cur (system-sender sys)))
			     (cur1 (sender-state-cur (system-sender (single-step sys r b))))))
	    :pro
	    (:claim (= (+ (sender-state-cur (system-sender (single-step sys r b)))
			  (* r (+ -1 steps)))
		       (+ (sender-state-cur (system-sender sys))
			  (* r steps))))
	    (:drop 1)
	    (:claim (<= (+ (sender-state-cur (system-sender (single-step sys r b)))
			   (* r (+ -1 steps)))
			(+ (sender-state-hia (system-sender (single-step sys r b)))
			   (sender-state-n (system-sender (single-step sys r b))))))
	    (:use (:instance dlv-b-doesnt-change-consts-and-decrs-bkt
			     (sys (system-s2r-tick-step (snd-r sys r)))))
	    (:use (:instance single-step-preserves-all-inf-all-1))
	    :pro
	    (:claim
	     (and
	      (= (tbf-d-cap (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
					       b)))
		 (tbf-d-cap (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (= (tbf-b-cap (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
					       b)))
		 (tbf-b-cap (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (= (tbf-rat (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
					     b)))
		 (tbf-rat (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (equal (tbf-del (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
						 b)))
		     (tbf-del (system-s2r (system-s2r-tick-step (snd-r sys r)))))
	      (= (tbf-bkt (system-s2r (dlv-b (system-s2r-tick-step (snd-r sys r))
					     b)))
		 (+ (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
		    (- b)))))
	    (:drop 2)
	    (:claim (^ (all-inf (tbf-data (system-s2r (single-step sys r b))))
		       (all-1 (tbf-data (system-s2r (single-step sys r b))))))
	    (:drop 1)
	    (:claim (not (natp (tbf-del (system-s2r (single-step sys r b))))))
	    (:claim (= b
		       (tbf-b-cap (system-s2r (single-step sys r b)))))
	    (:claim (= b
		       (tbf-rat (system-s2r (single-step sys r b)))))
	    (:claim (<= (tbf-bkt (system-s2r (single-step sys r b)))
			(tbf-b-cap (system-s2r (single-step sys r b)))))
	    (:claim (<= (tbf-b-cap (system-s2r (single-step sys r b)))
			(tbf-d-cap (system-s2r (single-step sys r b)))))
	    (:claim (<= (len (tbf-data (system-s2r (single-step sys r b))))
			(tbf-d-cap (system-s2r (single-step sys r b)))))
	    :prove))

