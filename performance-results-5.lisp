(in-package "ACL2S")
(include-book "performance-results-4")

(propertyd dlv-b-preserves-top-dn-rec (sys :system b :nat)
       :h (^ (<= (tbf-bkt (system-s2r sys))
             (len (tbf-data (system-s2r sys))))
         (all-1 (tbf-data (system-s2r sys)))
         (all-inf (tbf-data (system-s2r sys)))
         (= b (tbf-bkt (system-s2r sys)))
         (receiver-is-valid sys))
       (receiver-is-valid (dlv-b sys b))
       :instructions
       ((:use (:instance receiver-is-valid-definition-rule))
        :pro
        (:claim (or (endp (system-receiver sys))
            (equal (system-receiver sys)
                   (top-dn (maxl (system-receiver sys))
                       (maxl (system-receiver sys))))))
        (:drop 1 8)
        (:use (:instance receiver-is-valid-definition-rule
                 (sys (dlv-b sys b))))
        :pro
        (:claim (== (receiver-is-valid (dlv-b sys b))
            (or (endp (system-receiver (dlv-b sys b)))
                (equal (system-receiver (dlv-b sys b))
                   (top-dn (maxl (system-receiver (dlv-b sys b)))
                       (maxl (system-receiver (dlv-b sys b))))))))
        (:drop 1)
        (:induct (dlv-b-inductor sys b))
        (:use (:instance preserve-top-dn-receiver))
        (:use (:instance dlv-1-preserves-all-inf-all-1))
        (:use (:instance dlv-b-contracts))
        (:use (:instance dlv-b-definition-rule))
        :pro :prove
        (:in-theory (enable dlv-b-definition-rule))
        :prove))

(propertyd snd-1-doesnt-change-receiver (sys :system)
       :h (< (sender-state-cur (system-sender sys))
                 (+ (sender-state-hia (system-sender sys))
                    (sender-state-n (system-sender sys))))
       (== (system-receiver (snd-1 sys "p")) (system-receiver sys))
       :hints (("Goal" :in-theory (enable snd-1-definition-rule))))

(propertyd snd-r-doesnt-change-receiver (sys :system R :pos)
       :h (<= (+ (sender-state-cur (system-sender sys)) R)
          (+ (sender-state-hia (system-sender sys))
             (sender-state-n (system-sender sys))))
       (== (system-receiver (snd-r sys R)) (system-receiver sys))
       :instructions ((:induct (snd-r-inductor sys r))
              :prove
              (:use (:instance snd-1-doesnt-change-receiver))
              (:use (:instance snd-r-contracts))
              (:use (:instance snd-r-definition-rule))
              :pro (:casesplit (= r 1))
              (:in-theory (enable snd-r-definition-rule))
              :prove :prove :prove))

(propertyd receiver-doesnt-change-until-deliveries (sys :system R b :pos)
       :h (^ (<= (+ (sender-state-cur (system-sender sys)) R)
             (+ (sender-state-hia (system-sender sys))
            (sender-state-n (system-sender sys))))
         (all-inf (tbf-data (system-s2r sys)))
         (all-1 (tbf-data (system-s2r sys)))
         (not (natp (tbf-del (system-s2r sys))))
         (<= b (min R (tbf-d-cap (system-s2r sys))))
         (= b (tbf-b-cap (system-s2r sys)))
         (= b (tbf-rat (system-s2r sys)))
         (<= (tbf-bkt (system-s2r sys))
             (tbf-b-cap (system-s2r sys)))
         (<= (tbf-b-cap (system-s2r sys))
             (tbf-d-cap (system-s2r sys)))
         (<= (len (tbf-data (system-s2r sys)))
             (tbf-d-cap (system-s2r sys))))
       (== (system-receiver (system-s2r-tick-step (snd-r sys r)))
           (system-receiver sys))
       :hints (("Goal" :use ((:instance snd-r-doesnt-change-receiver)
                 (:instance system-s2r-tick-step-definition-rule (sys (snd-r sys R)))))))

(defthm receiver-rewrite-trick
  (=> (^ (possp r0)
         (possp r1)
         (== r0 r1)
         (or (endp r0)
             (== r0 (top-dn (maxl r0) (maxl r0)))))
      (or (endp r1)
          (== r1 (top-dn (maxl r1) (maxl r1)))))
  :instructions (:prove)
  :rule-classes nil)

(propertyd snd-r-len-nd (sys :system R :pos)
       :h (<= (+ (sender-state-cur (system-sender sys)) R)
          (+ (sender-state-hia (system-sender sys))
             (sender-state-n (system-sender sys))))
       (<= (len (tbf-data (system-s2r sys)))
           (len (tbf-data (system-s2r (snd-R sys R)))))
       :instructions
       ((:induct (snd-r-inductor sys r))
        :prove :change-goal
        (:use (:instance snd-r-definition-rule))
        :prove
        (:use (:instance snd-1-definition-rule (x "p")))
        :pro
        (:claim (== (system-s2r (snd-1 sys "p"))
            (tbf-prc (system-s2r sys)
                 (sender-state-cur (system-sender sys))
                 "p")))
        (:drop 1)
        (:use (:instance tbf-prc-definition-rule
                 (tbf (system-s2r sys))
                 (x (sender-state-cur (system-sender sys)))
                 (pld "p")))
        :pro
        (:claim (== (system-s2r (snd-1 sys "p"))
            (if (<= (+ (sz (tbf-data (system-s2r sys)))
                   (length "p"))
                (tbf-d-cap (system-s2r sys)))
                (mset :data
                  (cons (tdg (sender-state-cur (system-sender sys))
                         (tbf-del (system-s2r sys))
                         "p")
                    (tbf-data (system-s2r sys)))
                  (system-s2r sys))
              (system-s2r sys))))
        (:drop 1 10)
        (:claim (<= (len (tbf-data (system-s2r sys)))
            (len (tbf-data (system-s2r (snd-1 sys "p"))))))
        (:drop 9)
        (:use (:instance snd-r-definition-rule))
        (:casesplit (= r 1))
        (:use (:instance snd-r-definition-rule
                 (sys (snd-1 sys "p"))
                 (r (1- r))))
        :pro (:use (:instance snd-r-contracts))
        :prove
        (:use (:instance snd-r-contracts))
        :prove))

(definecd extremely-explicit-multi-step-contracts-witness (sys :system R b steps :pos) :bool
  :ic (^ (<= (+ (sender-state-cur (system-sender sys))
        (* r steps))
         (+ (sender-state-hia (system-sender sys))
        (sender-state-n (system-sender sys))))
     (all-inf (tbf-data (system-s2r sys)))
     (all-1 (tbf-data (system-s2r sys)))
     (! (natp (tbf-del (system-s2r sys))))
     (<= b (min r (tbf-d-cap (system-s2r sys))))
     (= b (tbf-b-cap (system-s2r sys)))
     (= b (tbf-rat (system-s2r sys)))
     (<= (tbf-bkt (system-s2r sys))
         (tbf-b-cap (system-s2r sys)))
     (<= (tbf-b-cap (system-s2r sys))
         (tbf-d-cap (system-s2r sys)))
     (<= (len (tbf-data (system-s2r sys)))
         (tbf-d-cap (system-s2r sys)))
     (receiver-is-valid sys))
  ;; --------------------------------------------------
  (^ (<= (+ (sender-state-cur (system-sender sys))
        r)
     (+ (sender-state-hia (system-sender sys))
        (sender-state-n (system-sender sys))))
     (systemp (single-step sys r b))
     (if (= steps 1) t
       (^ (<= (+ (sender-state-cur (system-sender (single-step sys r b)))
         (* r (1- steps)))
          (+ (sender-state-hia (system-sender (single-step sys r b)))
         (sender-state-n (system-sender (single-step sys r b)))))
      (all-inf (tbf-data (system-s2r (single-step sys r b))))
      (all-1 (tbf-data (system-s2r (single-step sys r b))))
      (! (natp (tbf-del (system-s2r (single-step sys r b)))))
      (<= b
          (min r
           (tbf-d-cap (system-s2r (single-step sys r b)))))
      (= b
         (tbf-b-cap (system-s2r (single-step sys r b))))
      (= b
         (tbf-rat (system-s2r (single-step sys r b))))
      (<= (tbf-bkt (system-s2r (single-step sys r b)))
          (tbf-b-cap (system-s2r (single-step sys r b))))
      (<= (tbf-b-cap (system-s2r (single-step sys r b)))
          (tbf-d-cap (system-s2r (single-step sys r b))))
      (<= (len (tbf-data (system-s2r (single-step sys r b))))
          (tbf-d-cap (system-s2r (single-step sys r b))))
      (receiver-is-valid (single-step sys r b))))))

(propertyd extremely-explicit-multi-step-contracts (sys :system R b steps :pos)
       :h (^ (<= (+ (sender-state-cur (system-sender sys))
            (* r steps))
             (+ (sender-state-hia (system-sender sys))
            (sender-state-n (system-sender sys))))
         (all-inf (tbf-data (system-s2r sys)))
         (all-1 (tbf-data (system-s2r sys)))
         (! (natp (tbf-del (system-s2r sys))))
         (<= b (min r (tbf-d-cap (system-s2r sys))))
         (= b (tbf-b-cap (system-s2r sys)))
         (= b (tbf-rat (system-s2r sys)))
         (<= (tbf-bkt (system-s2r sys))
             (tbf-b-cap (system-s2r sys)))
         (<= (tbf-b-cap (system-s2r sys))
             (tbf-d-cap (system-s2r sys)))
         (<= (len (tbf-data (system-s2r sys)))
             (tbf-d-cap (system-s2r sys)))
         (receiver-is-valid sys))
       (extremely-explicit-multi-step-contracts-witness sys R b steps)
       :instructions
       ((:use
         (:instance
          extremely-explicit-multi-step-contracts-witness-definition-rule))
        :pro
        (:claim
         (equal
          (extremely-explicit-multi-step-contracts-witness sys r b steps)
          (and
           (<= (+ (sender-state-cur (system-sender sys))
              r)
           (+ (sender-state-hia (system-sender sys))
              (sender-state-n (system-sender sys))))
           (systemp (single-step sys r b))
           (cond ((= steps 1) t)
             ((<= (+ (sender-state-cur (system-sender (single-step sys r b)))
                 (* r (+ -1 steps)))
              (+ (sender-state-hia (system-sender (single-step sys r b)))
                 (sender-state-n (system-sender (single-step sys r b)))))
              (and (all-inf (tbf-data (system-s2r (single-step sys r b))))
               (all-1 (tbf-data (system-s2r (single-step sys r b))))
               (not (natp (tbf-del (system-s2r (single-step sys r b)))))
               (<= b
                   (min r
                    (tbf-d-cap (system-s2r (single-step sys r b)))))
               (= b
                  (tbf-b-cap (system-s2r (single-step sys r b))))
               (= b
                  (tbf-rat (system-s2r (single-step sys r b))))
               (<= (tbf-bkt (system-s2r (single-step sys r b)))
                   (tbf-b-cap (system-s2r (single-step sys r b))))
               (<= (tbf-b-cap (system-s2r (single-step sys r b)))
                   (tbf-d-cap (system-s2r (single-step sys r b))))
               (<= (len (tbf-data (system-s2r (single-step sys r b))))
                   (tbf-d-cap (system-s2r (single-step sys r b))))
               (receiver-is-valid (single-step sys r b))))
             (t nil)))))
        (:drop 1)
        (:claim (^ (<= (+ (sender-state-cur (system-sender sys))
                  r)
               (+ (sender-state-hia (system-sender sys))
                  (sender-state-n (system-sender sys))))
               (all-inf (tbf-data (system-s2r sys)))
               (all-1 (tbf-data (system-s2r sys)))
               (not (natp (tbf-del (system-s2r sys))))
               (<= b (min r (tbf-d-cap (system-s2r sys))))
               (= b (tbf-b-cap (system-s2r sys)))
               (= b (tbf-rat (system-s2r sys)))
               (<= (tbf-bkt (system-s2r sys))
               (tbf-b-cap (system-s2r sys)))
               (<= (tbf-b-cap (system-s2r sys))
               (tbf-d-cap (system-s2r sys)))
               (<= (len (tbf-data (system-s2r sys)))
               (tbf-d-cap (system-s2r sys)))
               (systemp (single-step sys r b))))
        (:use (:instance receiver-is-valid-definition-rule))
        (:use (:instance receiver-is-valid-definition-rule
                 (sys (single-step sys r b))))
        (:casesplit (= steps 1))
        :prove
        (:use (:instance many-steps-contracts))
        :pro
        (:claim (if (endp (system-receiver sys))
            t
              (equal (system-receiver sys)
                 (top-dn (maxl (system-receiver sys))
                     (maxl (system-receiver sys))))))
        (:drop 4)
        (:claim
         (and (<= (+ (sender-state-cur (system-sender (single-step sys r b)))
             (* r (+ -1 steps)))
              (+ (sender-state-hia (system-sender (single-step sys r b)))
             (sender-state-n (system-sender (single-step sys r b)))))
          (all-inf (tbf-data (system-s2r (single-step sys r b))))
          (all-1 (tbf-data (system-s2r (single-step sys r b))))
          (not (natp (tbf-del (system-s2r (single-step sys r b)))))
          (<= b
              (min r
               (tbf-d-cap (system-s2r (single-step sys r b)))))
          (= (tbf-b-cap (system-s2r (single-step sys r b)))
             b)
          (= (tbf-rat (system-s2r (single-step sys r b)))
             b)
          (<= (tbf-bkt (system-s2r (single-step sys r b)))
              (tbf-b-cap (system-s2r (single-step sys r b))))
          (<= (tbf-b-cap (system-s2r (single-step sys r b)))
              (tbf-d-cap (system-s2r (single-step sys r b))))
          (<= (len (tbf-data (system-s2r (single-step sys r b))))
              (tbf-d-cap (system-s2r (single-step sys r b))))))
        (:drop 1)
        (:use (:instance single-step-input-contracts))
        :pro
        (:claim
         (and
          (systemp (snd-r sys r))
          (= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
         (tbf-b-cap (system-s2r sys)))
          (= (tbf-b-cap (system-s2r sys)) b)
          (all-inf (tbf-data (system-s2r (snd-r sys r))))
          (all-1 (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
          (all-inf (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
          (equal (tdgs->poss
              (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
             (tdgs->poss (tbf-data (system-s2r (snd-r sys r)))))
          (<= (len (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r)))))
          (tbf-d-cap (system-s2r sys)))
          (= (tbf-d-cap (system-s2r (system-s2r-tick-step (snd-r sys r))))
         (tbf-d-cap (system-s2r sys)))
          (= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
         b)
          (<= (tbf-bkt (system-s2r (system-s2r-tick-step (snd-r sys r))))
          (len (tbf-data (system-s2r (system-s2r-tick-step (snd-r sys r))))))))
        (:drop 1)
        (:use (:instance snd-r-effect-helper))
        (:use (:instance system-s2r-tick-step-definition-rule
                 (sys (snd-r sys r))))
        (:use (:instance tbf-tick-preserves-len-all-inf
                 (tbf (system-s2r (snd-r sys r)))))
        (:use (:instance snd-r-len-nd))
        (:use
         (:instance receiver-rewrite-trick
            (r0 (system-receiver sys))
            (r1 (system-receiver (system-s2r-tick-step (snd-r sys r))))))
        :pro
        (:claim (and (= (tbf-bkt (system-s2r (snd-r sys r)))
                (tbf-bkt (system-s2r sys)))
             (= (tbf-b-cap (system-s2r (snd-r sys r)))
                (tbf-b-cap (system-s2r sys)))
             (= (tbf-d-cap (system-s2r (snd-r sys r)))
                (tbf-d-cap (system-s2r sys)))
             (= (tbf-rat (system-s2r (snd-r sys r)))
                (tbf-rat (system-s2r sys)))
             (equal (tbf-del (system-s2r (snd-r sys r)))
                (tbf-del (system-s2r sys)))
             (= (sender-state-n (system-sender (snd-r sys r)))
                (sender-state-n (system-sender sys)))
             (= (sender-state-hia (system-sender (snd-r sys r)))
                (sender-state-hia (system-sender sys)))
             (= (sender-state-cur (system-sender (snd-r sys r)))
                (+ (sender-state-cur (system-sender sys))
                   r))
             (equal (system-receiver (snd-r sys r))
                (system-receiver sys))))
        (:drop 5)
        (:claim (^ (<= (len (tbf-data (system-s2r sys)))
               (len (tbf-data (system-s2r (snd-r sys r)))))
               (= (len (tbf-data (tbf-tick (system-s2r (snd-r sys r)))))
              (len (tbf-data (system-s2r (snd-r sys r)))))
               (equal (system-s2r-tick-step (snd-r sys r))
                  (mset :s2r
                    (tbf-tick (system-s2r (snd-r sys r)))
                    (snd-r sys r)))))
        (:drop 2 3 4)
        (:use (:instance receiver-doesnt-change-until-deliveries))
        :pro
        (:claim (equal (system-receiver (system-s2r-tick-step (snd-r sys r)))
               (system-receiver sys)))
        (:drop 1)
        (:drop 21 22 23 24 25 26 27 28 29)
        (:claim (pos-listp (system-receiver sys)))
        (:claim (pos-listp (system-receiver (system-s2r-tick-step (snd-r sys r)))))
        (:claim (equal (system-receiver sys)
               (system-receiver (system-s2r-tick-step (snd-r sys r)))))
        (:drop 56)
        (:claim
         (or
          (endp (system-receiver (system-s2r-tick-step (snd-r sys r))))
          (equal
           (system-receiver (system-s2r-tick-step (snd-r sys r)))
           (top-dn
        (maxl (system-receiver (system-s2r-tick-step (snd-r sys r))))
        (maxl (system-receiver (system-s2r-tick-step (snd-r sys r))))))))
        (:drop 1)
        (:use (:instance single-step-definition-rule))
        :pro
        (:claim (== (single-step sys r b)
            (dlv-b (system-s2r-tick-step (snd-r sys r))
                   b)))
        (:drop 1)
        (:claim (= b
               (tbf-rat (system-s2r (single-step sys r b)))))
        (:use (:instance dlv-b-preserves-top-dn-rec
                 (sys (system-s2r-tick-step (snd-r sys r)))))
        :pro
        (:use (:instance receiver-is-valid-definition-rule
                 (sys (system-s2r-tick-step (snd-r sys r)))))
        :pro
        (:claim
         (if (endp (system-receiver (system-s2r-tick-step (snd-r sys r))))
         t
           (equal
        (system-receiver (system-s2r-tick-step (snd-r sys r)))
        (top-dn
         (maxl (system-receiver (system-s2r-tick-step (snd-r sys r))))
         (maxl (system-receiver (system-s2r-tick-step (snd-r sys r))))))))
        (:claim (receiver-is-valid (system-s2r-tick-step (snd-r sys r))))
        (:drop 1)
        (:claim (receiver-is-valid (dlv-b (system-s2r-tick-step (snd-r sys r))
                          b)))
        (:drop 1)
        (:claim
         (=> (receiver-is-valid (single-step sys r b))
         (extremely-explicit-multi-step-contracts-witness sys r b steps)))
        (:drop 1 2 3 4 5 6 7 8
           9 10 11 12 13 14 15 16 17 18 19 20 21 22
           23 24 25 26 27 28 29 30 31 32 33 34 35
           36 37 38 39 40 41 42 43 44 45 46 47 48
           49 50 51 52 53 54 55 56 57 58 60 61 62)
        :prove))

