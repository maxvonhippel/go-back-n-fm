(in-package "ACL2S")
(include-book "performance-results-5")

(definecd many-steps (sys :system R b steps :pos) :system
  :timeout 60000
  :ic (^ (<= (+ (sender-state-cur (system-sender sys)) (* R steps))
	     (+ (sender-state-hiA (system-sender sys))
		(sender-state-N (system-sender sys))))
	 (all-inf (tbf-data (system-s2r sys)))
	 (all-1 (tbf-data (system-s2r sys)))
	 (! (natp (tbf-del (system-s2r sys))))
	 (<= b (min R (tbf-d-cap (system-s2r sys))))
	 (= b (tbf-b-cap (system-s2r sys)))
	 (= b (tbf-rat (system-s2r sys)))
	 (<= (tbf-bkt (system-s2r sys))
	     (tbf-b-cap (system-s2r sys)))
	 (<= (tbf-b-cap (system-s2r sys))
	     (tbf-d-cap (system-s2r sys)))
	 (<= (len (tbf-data (system-s2r sys)))
	     (tbf-d-cap (system-s2r sys)))
	 (receiver-is-valid sys))
  (if (= steps 1)
      (single-step sys R b)
    (many-steps (single-step sys R b) R b (1- steps)))
  :function-contract-hints (("Goal" :use ((:instance many-steps-contracts)
					  (:instance receiver-is-valid-definition-rule)
					  (:instance receiver-is-valid-definition-rule
						     (sys (single-step sys r b))))))
  :body-contracts-hints
  (("Goal" :use ((:instance extremely-explicit-multi-step-contracts)
		 (:instance extremely-explicit-multi-step-contracts-witness-definition-rule)))))

(definecd many-steps-real-inductor (sys :system R b steps :pos) :nat
  :timeout 60000
  :ic (^ (<= (+ (sender-state-cur (system-sender sys)) (* R steps))
	     (+ (sender-state-hiA (system-sender sys))
		(sender-state-N (system-sender sys))))
	 (all-inf (tbf-data (system-s2r sys)))
	 (all-1 (tbf-data (system-s2r sys)))
	 (! (natp (tbf-del (system-s2r sys))))
	 (<= b (min R (tbf-d-cap (system-s2r sys))))
	 (= b (tbf-b-cap (system-s2r sys)))
	 (= b (tbf-rat (system-s2r sys)))
	 (<= (tbf-bkt (system-s2r sys))
	     (tbf-b-cap (system-s2r sys)))
	 (<= (tbf-b-cap (system-s2r sys))
	     (tbf-d-cap (system-s2r sys)))
	 (<= (len (tbf-data (system-s2r sys)))
	     (tbf-d-cap (system-s2r sys)))
	 (receiver-is-valid sys))
  (if (= steps 1) 1 (many-steps-real-inductor (single-step sys R b) R b (1- steps)))
  :function-contract-hints (("Goal" :use ((:instance many-steps-contracts)
					  (:instance receiver-is-valid-definition-rule)
					  (:instance receiver-is-valid-definition-rule
						     (sys (single-step sys r b))))))
  :body-contracts-hints
  (("Goal" :use ((:instance extremely-explicit-multi-step-contracts)
		 (:instance extremely-explicit-multi-step-contracts-witness-definition-rule)))))

(propertyd simplify-contracts-helper (sys :system R b steps :pos)
	   :h (^ (<= (+ (sender-state-cur (system-sender sys))
			(* r steps))
		     (+ (sender-state-hia (system-sender sys))
			(sender-state-n (system-sender sys))))
		 (<= b (min r (tbf-d-cap (system-s2r sys))))
		 (<= (len (tbf-data (system-s2r sys)))
		     (tbf-d-cap (system-s2r sys))))
	   (^ (simplified-modelp (simplify sys))
	      (posp r)
	      (posp b)
	      (posp steps)
	      (<= (+ (simplified-model-cur (simplify sys))
		     (* r steps))
		  (+ (simplified-model-hia (simplify sys))
		     (simplified-model-n (simplify sys))))
	      (<= b
		  (min r
		       (simplified-model-d-cap (simplify sys))))
	      (<= (len (simplified-model-chan (simplify sys)))
		  (simplified-model-d-cap (simplify sys))))
	   :hints (("Goal" :in-theory (enable simplify-definition-rule
					      tdgs->poss-preserves-len))))

(propertyd simplify-preserves-eq (sys0 sys1 :system)
	   :h (== sys0 sys1)
	   (== (simplify sys0) (simplify sys1)))

(propertyd multi-step-preserves-eq (sm0 sm1 :simplified-model R b steps :pos)
	   :h (^ (<= (+ (simplified-model-cur sm0) (* R steps))
		     (+ (simplified-model-hiA sm0) (simplified-model-N sm0)))
		 (<= b (min R (simplified-model-d-cap sm0)))
		 (<= (len (simplified-model-chan sm0))
		     (simplified-model-d-cap sm0))
		 (== sm0 sm1))
	   (== (many-steps-simplified sm0 R b steps)
	       (many-steps-simplified sm1 R b steps)))

(propertyd single-step-simplified-preserves-simplified-modelp
	   (sm :simplified-model R b :pos)
	   ;; 1. The sender transmits R packets.  Then ...
	   ;; 2. The sender-to-receiver TBF delivers b of them.
	   :h (^ (<= (+ (simplified-model-cur sm) R)
		     (+ (simplified-model-hiA sm) (simplified-model-N sm)))
		 (<= b (min R (simplified-model-d-cap sm)))
		 (<= (len (simplified-model-chan sm))
		     (simplified-model-d-cap sm)))
	   (simplified-modelp (single-step-simplified sm R b)))

(encapsulate () (local (in-theory (enable tdgs->poss-preserves-len simplify-definition-rule)))
	     (propertyd many-steps-moves-thru-simplification (sys :system R b steps :pos)
			:h (^ (<= (+ (sender-state-cur (system-sender sys))
				     (* r steps))
				  (+ (sender-state-hia (system-sender sys))
				     (sender-state-n (system-sender sys))))
			      (all-inf (tbf-data (system-s2r sys)))
			      (all-1 (tbf-data (system-s2r sys)))
			      (! (natp (tbf-del (system-s2r sys))))
			      (<= b (min r (tbf-d-cap (system-s2r sys))))
			      (= b (tbf-b-cap (system-s2r sys)))
			      (= b (tbf-rat (system-s2r sys)))
			      (<= (tbf-bkt (system-s2r sys))
				  (tbf-b-cap (system-s2r sys)))
			      (<= (tbf-b-cap (system-s2r sys))
				  (tbf-d-cap (system-s2r sys)))
			      (<= (len (tbf-data (system-s2r sys)))
				  (tbf-d-cap (system-s2r sys)))
			      (receiver-is-valid sys))
			(== (simplify (many-steps sys r b steps))
			    (many-steps-simplified (simplify sys)
						   r b steps))
			:instructions
			((:induct (many-steps-real-inductor sys r b steps))
			 (:use
			  (:instance
			   extremely-explicit-multi-step-contracts-witness-definition-rule))
			 (:use (:instance extremely-explicit-multi-step-contracts))
			 :pro
			 (:claim (extremely-explicit-multi-step-contracts-witness sys r b steps))
			 (:drop 1)
			 (:claim (<= (+ (sender-state-cur (system-sender sys))
					r)
				     (+ (sender-state-hia (system-sender sys))
					(sender-state-n (system-sender sys)))))
			 (:claim (<= (+ (sender-state-cur (system-sender (single-step sys r b)))
					(* r (+ -1 steps)))
				     (+ (sender-state-hia (system-sender (single-step sys r b)))
					(sender-state-n (system-sender (single-step sys r b))))))
			 (:claim (and (all-inf (tbf-data (system-s2r (single-step sys r b))))
				      (all-1 (tbf-data (system-s2r (single-step sys r b))))
				      (not (natp (tbf-del (system-s2r (single-step sys r b)))))
				      (<= b
					  (min r
					       (tbf-d-cap (system-s2r (single-step sys r b)))))
				      (= b
					 (tbf-b-cap (system-s2r (single-step sys r b))))
				      (= b
					 (tbf-rat (system-s2r (single-step sys r b))))
				      (<= (tbf-bkt (system-s2r (single-step sys r b)))
                   (tbf-b-cap (system-s2r (single-step sys r b))))
               (<= (tbf-b-cap (system-s2r (single-step sys r b)))
                   (tbf-d-cap (system-s2r (single-step sys r b))))
               (<= (len (tbf-data (system-s2r (single-step sys r b))))
                   (tbf-d-cap (system-s2r (single-step sys r b))))
               (receiver-is-valid (single-step sys r b))))
			 (:drop 1)
			 (:claim
			  (and (systemp (single-step sys r b))
			       (posp r)
			       (posp b)
			       (posp (+ -1 steps))
			       (<= (+ (sender-state-cur (system-sender (single-step sys r b)))
				      (* r (+ -1 steps)))
				   (+ (sender-state-hia (system-sender (single-step sys r b)))
				      (sender-state-n (system-sender (single-step sys r b)))))
			       (all-inf (tbf-data (system-s2r (single-step sys r b))))
			       (all-1 (tbf-data (system-s2r (single-step sys r b))))
			       (not (natp (tbf-del (system-s2r (single-step sys r b)))))
			       (<= b
				   (min r
					(tbf-d-cap (system-s2r (single-step sys r b)))))
			       (= b
				  (tbf-b-cap (system-s2r (single-step sys r b))))
			       (= b
				  (tbf-rat (system-s2r (single-step sys r b))))
			       (<= (tbf-bkt (system-s2r (single-step sys r b)))
				   (tbf-b-cap (system-s2r (single-step sys r b))))
			       (<= (tbf-b-cap (system-s2r (single-step sys r b)))
				   (tbf-d-cap (system-s2r (single-step sys r b))))
			       (<= (len (tbf-data (system-s2r (single-step sys r b))))
				   (tbf-d-cap (system-s2r (single-step sys r b))))
			       (receiver-is-valid (single-step sys r b))))
			 (:claim (equal (simplify (many-steps (single-step sys r b)
							      r b (+ -1 steps)))
					(many-steps-simplified (simplify (single-step sys r b))
							       r b (+ -1 steps))))
			 (:drop 17)
			 (:use (:instance many-steps-definition-rule))
			 (:use (:instance many-steps-simplified-definition-rule
					  (sm (simplify sys))))
			 :pro
			 (:claim (equal (many-steps sys r b steps)
					(if (= steps 1)
					    (single-step sys r b)
					  (many-steps (single-step sys r b)
						      r b (+ -1 steps)))))
			 (:drop 2)
			 (:use (:instance simplify-contracts-helper))
			 :pro
			 (:claim
			  (equal (many-steps-simplified (simplify sys)
							r b steps)
				 (if (= steps 1)
				     (single-step-simplified (simplify sys)
							     r b)
				   (many-steps-simplified (single-step-simplified (simplify sys)
										  r b)
							  r b (+ -1 steps)))))
			 (:drop 1 2)
			 (:claim (== (many-steps sys r b steps)
				     (many-steps (single-step sys r b)
						 r b (+ -1 steps))))
			 (:claim (== (many-steps-simplified (simplify sys)
							    r b steps)
				     (many-steps-simplified (single-step-simplified (simplify sys)
										    r b)
							    r b (+ -1 steps))))
			 (:drop 46 47)
			 (:use (:instance single-step-moves-thru-simplification))
			 (:use (:instance receiver-is-valid-definition-rule))
			 :pro
			 (:claim (equal (simplify (single-step sys r (tbf-b-cap (system-s2r sys))))
					(single-step-simplified (simplify sys)
								r (tbf-b-cap (system-s2r sys)))))
			 (:drop 1
				2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)
			 (:drop 19 20 21 22 23 24 25 26 27 28 29)
			 (:use (:instance simplify-preserves-eq
					  (sys0 (many-steps sys r b steps))
					  (sys1 (many-steps (single-step sys r b)
							    r b (+ -1 steps)))))
			 :pro
			 (:claim (== (simplify (many-steps sys r b steps))
				     (simplify (many-steps (single-step sys r b)
							   r b (+ -1 steps)))))
			 (:drop 1)
			 (:use
			  (:instance multi-step-preserves-eq
				     (sm1 (simplify (single-step sys r b)))
				     (sm0 (single-step-simplified (simplify sys)
								  r (tbf-b-cap (system-s2r sys))))
				     (steps (1- steps))))
			 (:use (:instance simplify-definition-rule))
			 :pro
			 (:use (:instance simplify-contracts-helper
					  (b (tbf-b-cap (system-s2r sys)))))
			 :pro
			 (:claim (simplified-modelp (simplify (single-step sys r b))))
			 (:claim (and (simplified-modelp (simplify sys))
				      (posp r)
				      (posp (tbf-b-cap (system-s2r sys)))
				      (posp steps)
				      (<= (+ (simplified-model-cur (simplify sys))
					     (* r steps))
					  (+ (simplified-model-hia (simplify sys))
					     (simplified-model-n (simplify sys))))
				      (<= (tbf-b-cap (system-s2r sys))
					  (min r
					       (simplified-model-d-cap (simplify sys))))
				      (<= (len (simplified-model-chan (simplify sys)))
					  (simplified-model-d-cap (simplify sys)))))
			 (:drop 1)
			 (:use (:instance single-step-simplified-preserves-simplified-modelp
					  (sm (simplify sys))
					  (b (tbf-b-cap (system-s2r sys)))))
			 :pro
			 (:claim (== (simplify (many-steps sys r b steps))
				     (many-steps-simplified (simplify (single-step sys r b))
							    r b (+ -1 steps))))
			 (:claim (== (many-steps-simplified (simplify (single-step sys r b))
							    r b (+ -1 steps))
				     (many-steps-simplified
				      (single-step-simplified (simplify sys)
							      r (tbf-b-cap (system-s2r sys)))
				      r b (+ -1 steps))))
			 :prove
			 (:use (:instance many-steps-definition-rule))
			 (:use (:instance many-steps-simplified-definition-rule
					  (sm (simplify sys))))
			 (:use (:instance single-step-moves-thru-simplification))
			 :pro
			 (:claim (== (many-steps sys r b steps)
				     (single-step sys r b)))
			 (:drop 3)
			 (:use (:instance simplify-definition-rule))
			 (:use (:instance tdgs->poss-preserves-len
					  (tdgs (tbf-data (system-s2r sys)))))
			 :pro
			 (:claim (and (simplified-modelp (simplify sys))
				      (posp r)
				      (posp b)
				      (posp steps)
				      (<= (+ (simplified-model-cur (simplify sys))
					     (* r steps))
					  (+ (simplified-model-hia (simplify sys))
					     (simplified-model-n (simplify sys))))
				      (<= b
					  (min r
					       (simplified-model-d-cap (simplify sys))))
				      (<= (len (simplified-model-chan (simplify sys)))
					  (simplified-model-d-cap (simplify sys)))))
			 (:claim (equal (many-steps-simplified (simplify sys)
							       r b steps)
					(single-step-simplified (simplify sys)
								r b)))
			 (:drop 4)
			 (:drop 1 2)
			 (:use (:instance receiver-is-valid-definition-rule))
			 :prove)))
